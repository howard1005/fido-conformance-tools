/* -----

    COPYRIGHT FIDO ALLIANCE 2016-2020
    AUTHOR: YURIY ACKERMANN <YURIY@FIDOALLIANCE.ORG> <YURIY.ACKERMANN@GMAIL.COM>

    ANY MODIFICATION OF THIS CODE WITHOUT PRIOR CONCENT BY FIDO ALLIANCE
    WILL BE TREATED AS A BREACH OF THE FIDO ALLIANCE END USER LICENSE AGREEMENT
    AND WILL RESULT IN CANCELATION OF THE CONFORMANCE TEST RESULTS
    AND TOTAL AND COMPLETE BAN FROM THE FIDO CERTIFICATION PROGRAMME

    FOR ANY QUESTIONS CONTACT CERTIFICATION@FIDOALLIANCE.ORG

    YOU CAN DOWNLOAD EULA BY OPENING MENU -> LEGAL INFORMATION

+----- */
'use strict';

(function() {
    let rootCert = 'MIIFwDCCA6gCCQCNm1u56oRwXTANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDMxNjE0MzUyN1oXDTQ1MDgwMTE0MzUyN1owgaExGDAWBgNVBAMMD0ZJRE8yIFRFU1QgUk9PVDExMC8GCSqGSIb3DQEJARYiY29uZm9ybWFuY2UtdG9vbHNAZmlkb2FsbGlhbmNlLm9yZzEWMBQGA1UECgwNRklETyBBbGxpYW5jZTEMMAoGA1UECwwDQ1dHMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL11U5yAIVLMrL3xS8u8ysMSdOkDeoTO+RcAy+uXXp6k4SC+jOy37gICEtYI+MKQV1EMeMMf3rM1ueZAO3iPFa0NEdi/oQ7npnGjBNI8wMzD8FfNe6rWtzkDaHpsZW///MwWDpGyJR+Xyjcq6U4vS9bS6zZ7jslw0Oczx4UsYgOsIUXSSBaGOrRbxJ/JC5gnDYEYvtNM+PDPczLNKAyhdvBZWNWHr7MZ0P5TeJQcXsAoShRX2Y8U8fRNJm7SeiFKDP0Nn/QKxOSt7zGP4xt9nMasE1q2ZTdar2+W13CRz37RI0ZWpq/+YquoEbZ7Uj7NmBTcqhb260nmDER2FpwwYwPSark92IZbamozB8d7OEI1jJgsrjJhKan0EmRaWVBpHT4xYKdEu7r09S0JhKyU+52WDmmVQTMpYLrm4Xl7hRxyPyBYkalrozsGmPs8vlhNq3VsVbyBSMSpEmUaeAa7LLE9/Vh0agJLVFHh1ehYKJpzHnmmBXUqx0Fz3afmDm1NX0sr3O/6xIx1VSTViT3KNxBYpVH1qjHATLzuxcWmm+75fcJMiPYPSMXVmRb3Q1l91AM4BBeWhlP3Fbc7gDy0r+s7m0sGS6PT2J2rGog2rUxnJ+zCM11M7DeO0XM2nny4uRYPPk9w2EXzfvtdvieYU/5RB4RDm5TGxHhGXVZUgac5AgMBAAEwDQYJKoZIhvcNAQELBQADggIBAFt2XGd3k5GpbO1EUm3u60zT1fE6u6pOscp156k5VnsHgaHRHdIAPNLeLNmR7y5OnrXbh13CrGwU1q84jjJXpv+v14xUCc5i01yopFTQFLr4A7NHp2nNYfNhhIVSFAgW43EflJflbLEelCJzxLlWb5BoDsZeeNmEQsXIM1mJ26R3r0dzsHBb0uy+8LNR1gdVqdjhC8BLy3gh4+BWuidyZNt07LveDsSFW5rcj5wRrSx9hXPIyVpjQSljNvY7MVTouqJzNAAQMsTKkXPkTXldCop9Qo9UPkHRRm0l7LLtdaOoXrct0Ymocf8zxf9bFNiw9f4WRYQM6sMhzt8+s/oDilo4QhcUgeJEiEPESi6ynYTV62SHA4eMunUJ5dlCaRnFiR9DTImFa5IRzie326/nW/SPCaKc/yrFIihMMjJoSAPhpTb/K6yHOUG8r+KiQut7NzqGV301pQ9u62dGL5Oi1VXmCFlE2ramZs15BNOUyAo2CBbRJg3jKcdu/8QC6ojjDvQ863+7LPtn74wJC5RpUJsS0GhQWgq5pAXO3wA61Uobxi6MkOpCC0zBWx/d4CqpS4j4hFgxWBTXX48ihPu+hIxIF/AxbqtPvqLMExW/xZITn6ArpWyQ9e4SUVr3n3F33ap1XdDyZ0vwFcm18JQAtsvXT6qCLrWOXnHUgfn/+Viu';

    let rsaBatch = {
        'certs': ['MIIFBTCCAu2gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyNDEzNTI0MloXDTI4MDUyMTEzNTI0MlowgbsxHDAaBgNVBAMME0ZJRE8yIEJBVENIIEtFWSBSU0ExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyfuW8zMVK26VCLZUJGv4rwD4oOPFc1/XkMFQtIhLp9jVI/s6s+vzTukEFBYh0pP7ygSYugibOxxnpuioXcXktkBtTtTyK40cR5udu/Rjj1WoEIwtLFLjNd+SKLczxfqKDWtfzsMYl7iNyG2S/Ly9DM1WcocukxvBYg3jW38R7uayN4R8mTi6EGzTt5zu7ftpH9/Pp614P8jlVf09+RiCQGWd9cfByhoxZwbmrZGOIGeyvcl21XGtP9e0OxIn3ly+VzOat/jkPRzwTvv/De6zXwT2IPWXBhIAbaxVO2LcialEXs7urDwG6coD7Hc2eQ8BOlIflMGBkbVCEgITySylcwIDAQABoywwKjAJBgNVHRMEAjAAMB0GA1UdDgQWBBQNyYKJUkHC5xVJgKCxIdraOHwayjANBgkqhkiG9w0BAQsFAAOCAgEAuf4VBpeItOxb3iPX9wyeRnHZy9zVV4Zoq7yfrMmJyFcOlpkMnn/kwyaU1i2tYCIAxjV+IWWW9pp/5UEEbThqO7nU4jvTfz8T/6gmNAf+6J8StpwDYKMiR0or10etOwPldPbLf9d5FjHhSiJBdB3B5b0zaDnJC4VY4QePEvOJVV8ctQeRHdI7LPV7up7EhrmYE/a21YqFBoYmkIWTnca+zyp4+F7qChmZETwd8tytY+T1DfaUzPbkhpw8v9DaECAgORCJQKmdfP0S0RpKMz6IzpOzMzBd9jiIWSijlFHUDfSy0CGy058kn6w4eifhSW1VShSSaXVH+BM6Xr5AYSUufaOaZOILECBMRvL5mhaXNANTTcOz9G3mGx8GjPGmnJ058FmTauNoqexZwXLeBEmAELxy1oA/VZ4cKhekp3lp+f769bnLufD/+w2/+f0iUdwY34SMwPYNeC1qG1dZCtVseY+/B84doi8a3rORv0qMR05VL790b6hPN4/1xwW8BLpDLcyOqV/2nakDhdazGe7claFz3Pg6ELMr3nNC9l4TAd80rayu0PkG51oBPltKzXjh/j45pQbWvTfdICwSM3nGu1gewLPMu4bztqigexELcqaBqYIfwHNQD4V9FiqvUPetiqo6/AISgKQDYSfO8ZlXh0PLUbuxLtfeo1eh8b5YwYw='],
        'privateKey': {
            'kty': 'RSA',
            'n': 'yfuW8zMVK26VCLZUJGv4rwD4oOPFc1_XkMFQtIhLp9jVI_s6s-vzTukEFBYh0pP7ygSYugibOxxnpuioXcXktkBtTtTyK40cR5udu_Rjj1WoEIwtLFLjNd-SKLczxfqKDWtfzsMYl7iNyG2S_Ly9DM1WcocukxvBYg3jW38R7uayN4R8mTi6EGzTt5zu7ftpH9_Pp614P8jlVf09-RiCQGWd9cfByhoxZwbmrZGOIGeyvcl21XGtP9e0OxIn3ly-VzOat_jkPRzwTvv_De6zXwT2IPWXBhIAbaxVO2LcialEXs7urDwG6coD7Hc2eQ8BOlIflMGBkbVCEgITySylcw',
            'e': 'AQAB',
            'd': 'uELvu1_PoTaZeUA0VKG3VZeSOdxwhcdadXEV-gwY0L-r-c44CGlpJoTGtrhWFK_x1KMK3TP6wRsxp_-5kQp2kpkF3xO-9WIe-WiKpivWI62ly6rFjxjytHQH92LiNWtRQ9q_pXUv20F-_uiPXkekQ6iTg5m1MHjym0xGLHMo3gIxcRn1zOstGGNGKG1ApOdkhHAVK8sxQ2hhOyv85qEUkpxUAWLM7n31IUSJ6b4RR8VJxTbBnKlLE5UreSyjaKPymb0_qkZihYkDUKrXApegNeYMFzVtA8fqddIxY-7hizJuG-DA0-q7DscRP6HjK1U77ve-5weeK1MrTDKZQTnyaQ',
            'p': '9MORfRAcKmwRiCLHuY7JM9Gc3jGEC37kl-lkECjTrPHFKfBo62wx3b6dG9zivXcmJ9rUKIRgGU0rbAL5X0UP5fRRTr9tTMAwhnUcRVzIikN_l0IH9LTYVkjR6JJEYBGAlNNWPM0XHoiNKwRBSnaSVNTEZO2I04-GQKDq416Ng7U',
            'q': '00FDVcKUH6W5qTXAkc_6-GfKrQDsODVHXW-f7C7HQPaSEnJvSo3Vvr8UHq_rCQCuRiFmAEprWTA7ed_dOpgCgtGa6pLCw7UI-nxAD2ips0xZrJcDGAQwwveR1lukTixprcrOHov_GVUOI_yTGbjUHvCn3tcZWTO9kVdFeErsDYc',
            'dp': 'lfQm8z7mcpsI1qWwRR-UZvnZqEsfwcc5F1S2qCvLG15306zlKq57koXQTRyzkS4pIyuu5S_MjFO58Y-U5egyyEg5dAxVUzs_v3CKJHimqAaYabvbkfElxR8R8vGBkHXIl-UuJUvlCSDRk_QkaBFirzQ3KjpYpHx-3KN5pFjuTC0',
            'dq': 'M4K6VHL5gy35s1Sz-9nmrCNCvCR5dMso95N8Py64zxJQU8crc9ZZxAT7dvAWMz_DPr5uDKwYuMqV9gWr_9mI4zUQvRnD-8xswAcD573xgxKe2wKHcpey_Bc5rDb0PUt_CS1mTPR940NmC0hO5fq3XkP36tIwEBwZoRLSkZ5TKIk',
            'qi': 'H2p9STvBm2O3WiPgvMpkLxZ0bZXCao-WoEz6MK1C4lGiKgDyiLKD79zAIC82vJnh5i211uoqaiFRXTUOUN7OWw75AvtVW1Hu1sECdzyXRJrrtWKttCoFvjSRaOn-lXMCU5nVh5y7oEntZtVjAQxdN5IzRSGWqutZWxUGijDd0Ic'
        }
    }

    let tpmBatch = {
        'certs': ['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'],
        'publicKey': {
            'alg': 'RS256',
            'e': 'AQAB',
            'ext': true,
            'key_ops': [
                'verify'
            ],
            'kty': 'RSA',
            'n': '1z5zfRGlB378sKiIsltfPe3--pyI4ii_CN7Pv38O1WCLwb0-H608v6ULS54UYExI9wp39EN1IV7ZAJhB317QO2IXGtr65YZrSiUjWEcjtsrYbM0BlJMoRvCCql_y9cxD7tI9qODo9_FI4sf82PbJ3q2Q2RRJ2Ua1Z9jxcYHef6r76e3dQd1RBYS2BShN7lpsFewbsxBK5M2hp3e_q-T60t3RbjiK8zqlsWoVQdyHHyYYsCkKmOVVet9E5oKhz0T3WEb0H5Y296QnR0zqQnrnwfLvKxxDol2ogSiViiMK1ZpY2bBx-_744TUDH_hRvbiCXeGkH0Q5wELOlvhQWYthQQ'
        },
        'privateKey': {
            'alg': 'RS256',
            'd': 'mzJmZymPyoXfgSkj1yZW1_qAvQadFCS5CZZOSQ8-DNBeNMVUw9ZPVQeVy2Ih4wVeHvInZ7I0BGm1Id6msH5WulqRukVmXpS7S2zXvVEeCTDdOCXhG9W3Vt8X9-zS7DPqT4q79sakdBI_sXTtdSsMh0iyhjNAxC9doZElFejEG1xFX3kHVPqQNG_kzFuCy02p_LY2o6qQKbMsaTISxmD3EFgh6-xG5JFxPOu9Akgf5sW0KxIqdhsUKbTSKPPQBoRsfn7kqnNAZswhexKCvJHDpbNlD2zWSOuKx_IHIuvErT5UHkq-1FwMX3YGwBrSaL-eRXk872m4ejU67h_7Xj9S2Q',
            'dp': 'YnFkG1Rqq3wbGWSthGCX_29yZMsJKZsKGWYWE0E9SLbDL36cHzEIwr5yGMlR7FpF7wKVCfkvMOq36WZWICB-QKKABpGu6nMoNlZlNampPVbouHaRx-PXeXcJrF1Qsgr7h4NJQJ2YddkwUPZvhUN6Gad4_kCgSxSmtj3URPUsZ3U',
            'dq': 'NzOkytzgN3NjH2LHiBCPOAOsEdj7GZuT4xXq17K7UW5hdl6ZyTOeclXOFRnvXYWPIfqg3OM-YVvYrA7nV4Opq0rAKL86d3OnuBeezawkz1m98PnXQC3JZpmJ7QNX7CF2tT-u7F3KpuNQ1vngU4ck-F7qTmCyZjPuWv7xpXaJuxM',
            'e': 'AQAB',
            'ext': true,
            'key_ops': [
                'sign'
            ],
            'kty': 'RSA',
            'n': '1z5zfRGlB378sKiIsltfPe3--pyI4ii_CN7Pv38O1WCLwb0-H608v6ULS54UYExI9wp39EN1IV7ZAJhB317QO2IXGtr65YZrSiUjWEcjtsrYbM0BlJMoRvCCql_y9cxD7tI9qODo9_FI4sf82PbJ3q2Q2RRJ2Ua1Z9jxcYHef6r76e3dQd1RBYS2BShN7lpsFewbsxBK5M2hp3e_q-T60t3RbjiK8zqlsWoVQdyHHyYYsCkKmOVVet9E5oKhz0T3WEb0H5Y296QnR0zqQnrnwfLvKxxDol2ogSiViiMK1ZpY2bBx-_744TUDH_hRvbiCXeGkH0Q5wELOlvhQWYthQQ',
            'p': '69LFfEo93snYQ4VezOjacIu0W2EN_Gic8lI6XYe-Xd-8FhmsUv4I1NFG5zweXv-Ns6-QbW15T3ZXb839U_91-FV-1x_F3344C9CSiZ5CzXPh-b4bfxHxClXbA5CoIL93oTeSSvX10F4Ut_4O5OkH7UzGNMDmE8WNOvm3czQFbuc',
            'q': '6ajuM3L7B1Fw03i7WN-ICXBzby1egMexRlmdUTFWqKT-YCGZpk7tww8R0ofz0mF2uZOdg5Cc9AQzQTAFqWCHsinjhQqE8lx6nSnt3eORrM8HxDVgWHFAtHhxu1Zwp-D2Z8aHnWbG_Aw7GSkTe-phpLImvp-idsmgxyj_wjslcZc',
            'qi': 'cAgRckONx515TQu1adEBWBnZlpdKfBEViqrLO_icHamcY_GfbHsrogYxa8DIZ1db6ccxnrIcarx0Un_aA8XT3Q5TYs7RPoydxG7zS6psGzYqyvVJXHhvduIm42BNevjmiHIHnpV90TRc9do2o17QYpko0d0E4-_szR_oIylu4pg'
        },
        'commonName': 'NCU-NTC-KEYID-FF990338E187079A6CD6A03ADC57237445F6A49A'
    }

    let safetyNetBatch = {
        'certs': ['MIIFKTCCBBGgAwIBAgIPBCb5iKjX0VImjcus4wy5MA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMSkwJwYDVQQDDCBGSURPIEFsbGlhbmNlcyBGQUtFIFJvb3QgQ0EgLSBTMTAeFw0xNzAyMDEwMDAwMDBaFw0zNTAxMzEyMzU5NTlaMG4xCzAJBgNVBAYTAlVTMSswKQYDVQQKDCJGSURPIEFsbGlhbmNlcyBGQUtFIFRydXN0IFNlcnZpY2VzMTIwMAYDVQQDDClGSURPIEFsbGlhbmNlcyBGQUtFIEludGVybmV0IEF1dGhvcml0eSBGMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMEHmFfbNypPuq94k+SSCiUvXSumolYpHYHikPaV2jQbbXvGuJ+w8yxzHGURFZQLfCFVrTZ269ebvY2pNlhUSpNJc7SpholSr9tCjuHdGL3uvBdpxaZjvtdVE6yn5ZvCxyx/hAguEdkdPuVEmdVDr64c68d28oi/3YsFnIbqMnuXv8pqvFasGjdTWFC3auJGdu2v65sBU4vWcrEFdYj0MgwOD0loYHb+0zKK9wxfiZPUV8HEZbKwDWf5jouacJeWZ324WF1LHOjWrxHgoDQBizs2qUFJvCNinsaCSM5JSxQulMGdbDUUSvY3nikznryNrN6f/ORnfk2+KIztct2kOIcCAwEAAaOCAeAwggHcMAsGA1UdDwQEAwIBhjBUBgNVHSAETTBLMEkGBmeBDAECAjA/MD0GCCsGAQUFBwIBFjFodHRwczovL3BraS5jZXJ0aW5mcmEuZmlkb2FsbGlhbmNlLm9yZy9zYWZldHluZXQvMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBQ9JavELAU9MEGJBWlPZj6GsyZ5wTAfBgNVHSMEGDAWgBRcW5C4Dn6B563jnU2nCTqTYpufKDB9BgNVHR8EdjB0MHKgcKBuhmxodHRwczovL3BraS5jZXJ0aW5mcmEuZmlkb2FsbGlhbmNlLm9yZy9zYWZldHluZXQvY3JsL0ZJRE8lMjBGYWtlJTIwUm9vdCUyMENlcnRpZmljYXRlJTIwQXV0aG9yaXR5JTIwMjAxOC5jcmwwgYQGCCsGAQUFBwEBBHgwdjB0BggrBgEFBQcwAYZoaHR0cHM6Ly9wa2kuY2VydGluZnJhLmZpZG9hbGxpYW5jZS5vcmcvc2FmZXR5bmV0L0ZJRE8lMjBGYWtlJTIwUm9vdCUyMENlcnRpZmljYXRlJTIwQXV0aG9yaXR5JTIwMjAxOC5jcnQwDQYJKoZIhvcNAQELBQADggEBACJ+/YAOFbdGhsEVc9Jz3DaVjxTrRPhKsLcyN23KYz+O28naGDkW4ojGA/8rhrt978dO5xOVQT6Ai0OnxPKtOcRiP4vDx3GDdLTG9iE1LOlUXHclfgUdr9yN7hvqRCu2oBFWRUGWMNx0gsglKcenJoCDdyZxwQxT3FwGPSjmL75CVIeES7M/RvV+MUEKwxnmO/duqPhuxHjAErdq3VsKIvc5+Bg+6Nvd2s41zShvCH5x93iOkf5Se04gfL5Z1KIdOGQBDDxzFBzTaF8MNvRsMwwks9dAFAY8pDGl4K24sbvnwut7MEHzROjJ+GQrz1dl45VNaOn/hZ8CAs3A8wx4baI='],
        "publicKey": {
            "alg": "RS256",
            "e": "AQAB",
            "ext": true,
            "key_ops": [
                "verify"
            ],
            "kty": "RSA",
            "n": "wQeYV9s3Kk-6r3iT5JIKJS9dK6aiVikdgeKQ9pXaNBtte8a4n7DzLHMcZREVlAt8IVWtNnbr15u9jak2WFRKk0lztKmGiVKv20KO4d0Yve68F2nFpmO-11UTrKflm8LHLH-ECC4R2R0-5USZ1UOvrhzrx3byiL_diwWchuoye5e_ymq8VqwaN1NYULdq4kZ27a_rmwFTi9ZysQV1iPQyDA4PSWhgdv7TMor3DF-Jk9RXwcRlsrANZ_mOi5pwl5ZnfbhYXUsc6NavEeCgNAGLOzapQUm8I2KexoJIzklLFC6UwZ1sNRRK9jeeKTOevI2s3p_85Gd-Tb4ojO1y3aQ4hw"
        },
        "privateKey": {
            "alg": "RS256",
            "d": "phsvEYtm8VYixBTyz2KMsGsNth5y28oNxlN9g3R4jRZ9JGJhRaoz2DBGYwJMm1U2wEjGAXRchvFSMLFIPsJqWkx-8Rxg1ZL-GaQw6FQmkmr6GPvARerXst1XTOA-ScdXNgeVSqS6Xyc3lHtwFYFlkGL60m6dTugscRGnHMI0Jv1zXev5-umXTjfv43pqehlspcJgGD46YRb4uLmCMUx78UdxNVa1buJ4fRpEuTgWG-2IzHsSHw-7iWkq8_mZEveFDbpZYrg0ZDUxdrsMULinZCf1uLIGH8fgmdvY4YMrpo9Szl_Y8yBJzNkhzOcmopDMPXImPTurECVrjZnZ--I0YQ",
            "dp": "S3CLHvVISsMHO8toV27EwKyHOUAYWhXoDUoT8M9Dn0FX94eJ8bgRw7uCDN8zBdeQOVFb10bV1-SAvOKO2I1aUKB9wifs8B5WT3IaCfRS3UnUDTiWYDIPpiU4hA-5V2L0WULwRrPScj7rNxfuqeEG1lN_1xQpfdTbnX03ucU_fmU",
            "dq": "pJZUgUO61lq7-bCby4q2NwnOAkzEo792C2b73GjBekh_ghsvR-R9xhFcQL5-duBCojrKFpPQhRioAk5paYaJW9KHy6llCrKSCZp8ieRjENJpfNQqhcm28ojO-ehvHq20MHzl07WH7g8nYDKX3u0mcg2uqObPyBy4AGvwlOhKnZE",
            "e": "AQAB",
            "ext": true,
            "key_ops": [
                "sign"
            ],
            "kty": "RSA",
            "n": "wQeYV9s3Kk-6r3iT5JIKJS9dK6aiVikdgeKQ9pXaNBtte8a4n7DzLHMcZREVlAt8IVWtNnbr15u9jak2WFRKk0lztKmGiVKv20KO4d0Yve68F2nFpmO-11UTrKflm8LHLH-ECC4R2R0-5USZ1UOvrhzrx3byiL_diwWchuoye5e_ymq8VqwaN1NYULdq4kZ27a_rmwFTi9ZysQV1iPQyDA4PSWhgdv7TMor3DF-Jk9RXwcRlsrANZ_mOi5pwl5ZnfbhYXUsc6NavEeCgNAGLOzapQUm8I2KexoJIzklLFC6UwZ1sNRRK9jeeKTOevI2s3p_85Gd-Tb4ojO1y3aQ4hw",
            "p": "7lCvHoiRHaGzIjaw_JuhhSlWOi-Nal8kGJtlpBV5-Od709315Z4qDSUqIezMTzQfswUGM89-d22b93PEnDkxaHQSfi6iC70MyAHk2nE9TIofbg23gFz9gopWJanvdCt7YBF99aLGcsa8rLJBuBSKyg4LbwhsOCZrSS9TVH1jIgs",
            "q": "z1qdPVvFT3SQliNrjuJX_9e14zH5bYbAN0KW_6YR2W15w04221iM1lK6B_dVts5NsC92IoRG6K3rit44OCP_dd8k8Hl_ZmrzZxJlZd-BVazc8BBBo3aVn_oF9UnhwodTtdVQsNMoCWegpNmEROvZfiPypZNX9z4lMKkOtWs4bPU",
            "qi": "wk22_VOLUayG0eOPRR_RJmce17JWA21mYvcBpAchWrlRz1CNv86jm6hb-ud1xCOCkg8MAPf-hHP6jgeXQAaNOK38hMVftY-SWSnz6Pi5UTyynVgtqiIE53xiwgW2u5-X-L9OvZOJKLyznRAiYTsOUkmIX8XgwWQNGzHDtnOWVAI"
        }
    }

    let availableCrypto = {
        'ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW': {
            'batchEXPIRED': {
                'certs': ['MIIESTCCAjGgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMjEyMTg0NVoXDTE4MDUyMzEyMTg0NVowgcoxKzApBgNVBAMMIkZJRE8yIEVYUElSRUQgQkFUQ0ggS0VZIHByaW1lMjU2djExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESXbsfyQurkxloaPHkiqbkJs0XxdNVf3FRlBASmPNhvjQdyevpO+qkxr2kChuR10MgwomSCRosSAANcZqDZ7EZ6MsMCowCQYDVR0TBAIwADAdBgNVHQ4EFgQUr+yrT7stqT3EpLWhHoq+bBY8b30wDQYJKoZIhvcNAQELBQADggIBACFMfbGieaV0hA0ugm/sMjadrTyT2kkChBbFJ68xE7GOQZtB3NcBDR39qVIZ6qKFw3H1roQytv1rfOgGeqvKd5r/dWCl8iX2VzQJLDFzjRPpyg0ZIo6zcnancy9fA+iOWlsMo/4nAJ3gxbswASHr68aIbApFWAxdLXTQ7ChkR8Gkb9iVhqfGrQocGtHAJGGENjmCMpVZLsWrlMX8fAVFONcPH5J6mvyIdY6chn1+si+hA2B+Z0gJun2J3tc4GZIbylUtf0TTyFFw/WLLJlzpWz6TKl6PkWR9+MzQM25SBWYsU6Ls0QYIIrc9bzQ7uSHArssbrVRBoj/3BLfQABfmBLO8lJii3YFnjOQIxly9j6uDUlox3rATR8hqhYMz4B0HDFQ75EeLmbMIer/nAPXFwfGwnnIqJ6IGv+xWT4N7nsZI4/yPS3zrhw7IYTtb1jShdO6AVvmJVzmI9njpL+oXXJT5l2264zTCUdcWOT6Hr/TgmqurumWH+Mo2qg1ozfvoW1FFDd47iIcKO+PFoP3bOx18NN234QLd9zFauvkxw2VhCfa3/CuoAcrK3QK3gZDizQ9HOc4ZOR1d0QJ/EGBtzyhe3ZJLS723QUL0nw25rv4M3Gl0Z9qTLOpK4urWEfNsr50WWQugECC8N64fVNyiH++mo+5ch0jTThymQuVsC7lE'],
                'privateKey': '9557b24eeae47120498ddf714a0a62291c79a4de6f89d74e24ba33e43d87bf6f',
                'publicKey': '044976ec7f242eae4c65a1a3c7922a9b909b345f174d55fdc54650404a63cd86f8d07727afa4efaa931af690286e475d0c830a26482468b1200035c66a0d9ec467'
            },
            'batchNOTStarted': {
                'certs': ['MIIETzCCAjegAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTMwMDYxOTE0NTQwNloXDTQwMDYxNjE0NTQwNlowgdAxMTAvBgNVBAMMKEZJRE8yIE5PVFNUQVJURURZRVQgQkFUQ0ggS0VZIHByaW1lMjU2djExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEoUpBKzN22Ynh9L2q3Vjm9rjeysYPeQ9J4DPoDI4tj44KbC5GBIJw4F0qQw5LmLQt/atzSUQcEGlkBr4oM4lrBaMsMCowCQYDVR0TBAIwADAdBgNVHQ4EFgQUGtVIfE/IvQnEH0sRLBxEg4JI5tIwDQYJKoZIhvcNAQELBQADggIBALzCDe2+aRK+Hz6YnwVlelucGfF0LcklA/1ImxflW2jli9kOjq4Y5sTWVzhqpebGDtkbSB1Fj1WgBbZBwdxHp8YTXgQxPBhIbXfAM6uolKoZmta+EgXgGgquQ6I7DaiyRzz0Ugn4QlAX/G3n9o0iTQ0trpFOjERuG8SZ4kqzO7vffKKbmeFmb459sYZ4R+rrJEXgFDxagTVfs9cjtIaxC5XDOxfYWmNa+fIz3VE8bWsw3Sz7Bdqyxeit7FouuLDB8GdFy6h0OybH1b+co9Oqnt3jxE9ZHIrX7EGim7rfNcsb5+uiWgpOwEq8skrpOGbwwlm0Nv7lGU1/HYWP5+fDc1SWZapnTNTDUPYM+1p5wQpKskTwbIu4xs8o2cgYiMi/qNUbYvyN33hj9ShdVThHuhlp9BLIESzIFhM1rcvjcyBpl/ZyLN+qJg6qzGSz3vxb8JYDKW/17W+TpGRmT/rVwJGRkzBNgP7e4IqeRJCL9RE4r63FwMUsfh8FRTslweq15/WCU7p6Rr8iG6Dx/5T7lE8z0hTpdckTTubbiFNMW9VicjEfqbtD8YXZuXaY05O0pXngVbL+Myw04ntahtWVuAsr5sF7ACrz6Sk40+oL6j1JJMKXHpJsn0Y8iPHtoVpMeM8OVpLMFh4f/PX2PU6YyL13O0CMKItc7zznv17PKPQm'],
                'privateKey': '60f696c6b4db263d48272aa09e0834e3321bf9678017719205c20a9ad47278f3',
                'publicKey': '04a14a412b3376d989e1f4bdaadd58e6f6b8decac60f790f49e033e80c8e2d8f8e0a6c2e46048270e05d2a430e4b98b42dfdab7349441c10696406be2833896b05'
            },
            'batchForExpiredIntermediate': {
                'certs': ['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'],
                'privateKey': '1f5646bbf7e8b9235d351d5464db8756256437b9cbec75a8c68ac78c6899a56b',
                'publicKey': '04e9ba8cd6f60ac16daa0c3d120b7c69cbf0fb7a678973f795e081ad0ebdd578bf1062baa03e33f284a5606094b283245a891248a87bccf39244ad825e53dd9f9f'
            },
            'batchForIntermediate': {
                'certs': ['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'],
                'privateKey': '98ae7fa810e2fa261c89bcb9d14fa1b1dd7ac307f513055e9c323ccb289312ed',
                'publicKey': '04bad962acf1ad522f9afb0a0c921c17dbeb3a9993d0a4a36663bec4f5cbf21afb806469651c519183f47c910fcc2a346532b70febc716db1d0e01bd576e294864'
            },
            'batch': {
                'certs': ['MIIEQTCCAimgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMzE0Mzk0M1oXDTI4MDUyMDE0Mzk0M1owgcIxIzAhBgNVBAMMGkZJRE8yIEJBVENIIEtFWSBwcmltZTI1NnYxMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMSIwIAYDVQQLDBlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE86Xl6rbB+8rpf232RJlnYse+9yAEAqdsbyMPZVbxeqmZtZf8S/UIqvjp7wzQE/Wrm9J5FL8IBDeMvMsRuJtUajLDAqMAkGA1UdEwQCMAAwHQYDVR0OBBYEFFZN98D4xlW2oR9sTRnzv0Hi/QF5MA0GCSqGSIb3DQEBCwUAA4ICAQCH3aCf+CCJBdEtQc4JpOnUelwGGw7DxnBMokHHBgrzJxDn9BFcFwxGLxrFV7EfYehQNOD+74OS8fZRgZiNf9EDGAYiHh0+CspfBWd20zCIjlCdDBcyhwq3PLJ65JC/og3CT9AK4kvks4DI+01RYxNv9S8Jx1haO1lgU55hBIr1P/p21ZKnpcCEhPjB/cIFrHJqL5iJGfed+LXni9Suq24OHnp44Mrv4h7OD2elu5yWfdfFb+RGG2TYURFIGYGijsii093w0ZMBOfBS+3Xq/DrHeZbZrrNkY455gJCZ5eV83Nrt9J9/UF0VZHl/hwnSAUC/b3tN/l0ZlC9kPcNzJD04l4ndFBD2KdfQ2HGTX7pybWLZ7yH2BM3ui2OpiacaOzd7OE91rHYB2uZyQ7jdg25yF9M8QI9NHM/itCjdBvAYt4QCT8dX6gmZiIGR2F/YXZAsybtJ16pnUmODVbW80lPbzy+PUQYX79opeD9u6MBorzr9g08Elpb1F3DgSd8VSLlsR2QPllKl4AcJDMIOfZHOQGOzatMV7ipEVRa0L5FnjAWpHHvSNcsjD4Cul562mO3MlI2pCyo+US+nIzG5XZmOeu4Db/Kw/dEPOo2ztHwlU0qKJ7REBsbt63jdQtlwLuiLHwkpiwnrAOZfwbLLu9Yz4tL1eJlQffuwS/Aolsz7HA=='],
                'privateKey': '28857aaed6dd6efc6e64762f53f7c3da3fa34e45b55bb040612d4f611f49f834',
                'publicKey': '044f3a5e5eab6c1fbcae97f6df644996762c7bef7200402a76c6f230f6556f17aa999b597fc4bf508aaf8e9ef0cd013f5ab9bd27914bf0804378cbccb11b89b546'
            },
            'android-keystore-batch': {
                'certs': ['MIIDFDCCArqgAwIBAgIBAjAKBggqhkjOPQQDAjCB3DE9MDsGA1UEAww0RkFLRSBBbmRyb2lkIEtleXN0b3JlIFNvZnR3YXJlIEF0dGVzdGF0aW9uIFJvb3QgRkFLRTExMC8GCSqGSIb3DQEJARYiY29uZm9ybWFuY2UtdG9vbHNAZmlkb2FsbGlhbmNlLm9yZzEWMBQGA1UECgwNRklETyBBbGxpYW5jZTEiMCAGA1UECwwZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1ZMRIwEAYDVQQHDAlXYWtlZmllbGQwHhcNMTkwNDI1MDU0OTMyWhcNNDYwOTEwMDU0OTMyWjCB5DFFMEMGA1UEAww8RkFLRSBBbmRyb2lkIEtleXN0b3JlIFNvZnR3YXJlIEF0dGVzdGF0aW9uIEludGVybWVkaWF0ZSBGQUtFMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMSIwIAYDVQQLDBlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKtQYStiTRe7w7UbBEk7BUkLjB+LnbzzebLe3KB8UqHXtg3TIXXcK37dvCbbCNVfhvZxtpTcME2kooqMTgOm9cejYzBhMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgKEMB0GA1UdDgQWBBSj0qos7w2M8iQC1Ry0YLy/alskFDAfBgNVHSMEGDAWgBRSmhsy4FaqzVEP71+ANwaL8pEjHTAKBggqhkjOPQQDAgNIADBFAiEAsW8uQC+0es5tOY3w/T7IshPj3o//B5IQRsHq8IlZKH0CIG75Q6isJ4twXhaLE4b0TkuLadd7i4zarqZsoaSWXy75'],
                'privateKey': 'e624da0d623ce51ded16f7c89f90ddded96346cbfc17270794b8ddf48874181e',
                'publicKey': '04ab50612b624d17bbc3b51b04493b05490b8c1f8b9dbcf379b2dedca07c52a1d7b60dd32175dc2b7eddbc26db08d55f86f671b694dc304da4a28a8c4e03a6f5c7'
            },
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW']
        },
        'ALG_SIGN_SECP384R1_ECDSA_SHA384_RAW': {
            'batch': {
                'certs': ['MIIEXTCCAkWgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMzE0NDEwNVoXDTI4MDUyMDE0NDEwNVowgcExIjAgBgNVBAMMGUZJRE8yIEJBVENIIEtFWSBzZWNwMzg0cjExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEXXATcezO4fbjPPERBE+ayAKLGWggaNNEewAGvfc6JutQN6chGXKBIed5XYMTDsWVBKYgvX+qxz36dAVeCfKZT3cxJYqUr6UrCD/f44clXF9jhAbEkQH8q+4JvdI95Gh/oywwKjAJBgNVHRMEAjAAMB0GA1UdDgQWBBQ+SLz6HQfkHDblfCcZ4zqTd8CZxTANBgkqhkiG9w0BAQsFAAOCAgEAkEf20cH7QGV+5STlJQlkvRlY1AKDToiP0GxlvT8Grz7782yB2mhuvO71p9mNPOJzD8H3uIv1eKXRFckAYBz41WpTaxLEpzjZSs/Zh2kar61QlP85s18bb2BUnWw2/eDGxw9mWAU6ykeMfQwuO7tRj4LKOdMW4TFfYGpKioiJHz5FjTx9ETSEsNHUZB//sKCGSBnJyCfzcJaBMrtgsFM7C3WJlO/88ZgQU17zA44+8QBoUGdEPV9Kea/Fqu2WW2Y79tded9VVPRIgLn5xa4ggsipcDdrEWhathU4cX3z7R9fZU3vflBVpeWvHxBl73lJFCZQ7fuovhmcffbZLK9kEoWYWyO2W+axn6nwYY0e/AtSS/QNzLYfPO3B+irJxdaes7aXx64OUzztvdPl0TTIgmP5vUWa02rDMH8XF3ge+kkZv1NTTqDMyI2tf4roZ5EAWOjDOQf87Tv1NZ9QEk2ca007rQ1pRY6MRJVZWNQL8CPDm6OSmZkSoTm5OrAeztrLy91xJ65kc+8+pobvq0QxHaUjvLv2k0x0emweRbNVqZglC757n7dCvS6tPtHVwqfP4R3ET6qVGGibR/1AB+7hF1M+EJr3rBIWKRz/Q42Y5pjXNggbvSD8+ao37O5/GpLQ1Aj7Lt31+dgH5bnUfuVow+INGD2lnW4TDC8zBlrbn3d8='],
                'privateKey': '4e92c1d9224370866c096379396b8a01b4dc4039003b894d32890d246f7d2b7041d3c5ae2c9ea4637b32ac29badc8a33',
                'publicKey': '045d701371eccee1f6e33cf111044f9ac8028b19682068d3447b0006bdf73a26eb5037a72119728121e7795d83130ec59504a620bd7faac73dfa74055e09f2994f7731258a94afa52b083fdfe387255c5f638406c49101fcabee09bdd23de4687f'
            },
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_SECP384R1_ECDSA_SHA384_RAW']
        },
        'ALG_SIGN_SECP521R1_ECDSA_SHA512_RAW': {
            'batch': {
                'certs': ['MIIEgzCCAmugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMzE0NDIwMFoXDTI4MDUyMDE0NDIwMFowgcExIjAgBgNVBAMMGUZJRE8yIEJBVENIIEtFWSBzZWNwNTIxcjExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBeUuJUgoF73z85oJtTrXLxnHS0RfkZptHlLftYUcjcVXLC7tv5JXBM9UrMvtVwqw9NLGsj9I5CPymEhAkg28D77sA1deteeB0TeDcr5y8MkVj/I0bpPHq79UqR2OH1LsJSVsn1hYmDk+FeLpry3xi9OParPGYDrvZTsR+ymfCGneTjjSjLDAqMAkGA1UdEwQCMAAwHQYDVR0OBBYEFFFursNsFhvxoK/dwB2bPxcxCbvAMA0GCSqGSIb3DQEBCwUAA4ICAQBD2IqzhBCoGzL4C+dwcJtUFm/A5xufoaoT4d7ZpQ0+1n6c4fdyoGBSVYMaDnPHd5+hSxMKkaKaLmYjpgRuoulN2lPvY6asSYZ5RFF/s0MAqzcOxlVWFE8C1qPIEKr1NjeF3wvvKO94Pi3/3akok/GHLMcYqhrPJPJdmPtM3JwbJY7KI8jkgkN5DU8m0EWZDLuSWsCVu7aHcN1oLUQ72Iw83AXXmI+6Z5SS8cE8M58NRUgxNXLBPpr9C54mKQHv5L22QzJ5wC3KIUE8PpmEJkUS7XtsSBQDThdaAiAzPgK2QCTfRqPiA9A5ZllYOceCBI5Eh7JlpkzFxaCy+lxdFK9S4mCnJOJFseq57wsLZlzIbKwSwJk9TYV185eoJf0ra8mmN7GbrI34PbatkOpvdLX1SM4mV2jSom3TfX8VEvWmhftCKOG7vSJWy0GQnns2jnLfpnbVngtXtTHwrRCnfEn2qV7IHF+D8BfOQp4bFL0nP+bGlY91GIid3KWhuJ4FxCy1/7aly7ihmUu81L3dziipIEQysYzedRJ4SMKnbJv5t7T3cg5suCLmIidEVBkwJwwEcEvx0fPAyu9Z/300Da3gvhxdWmCQr+WGMUCTzvMXdAHoTTgH1Sxy5bw5Q2wLnMTL96NyRwB8ChKjzjr3x5/b9QncMj9jI3RRHIErtM7qEw=='],
                'privateKey': '0056321e3582420c35ecfbd7c1125357a5632e8c9addf168da1103bfc7da09af99b20b7cbfcc6bc846e6b5b3dc2a9e9c68c79331530f5d18a2152d1f454d2376ead0',
                'publicKey': '0401794b89520a05ef7cfce6826d4eb5cbc671d2d117e4669b4794b7ed6147237155cb0bbb6fe495c133d52b32fb55c2ac3d34b1ac8fd23908fca6121024836f03efbb00d5d7ad79e0744de0dcaf9cbc324563fc8d1ba4f1eaefd52a476387d4bb09495b27d616260e4f8578ba6bcb7c62f4e3daacf1980ebbd94ec47eca67c21a77938e34'
            },
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_SECP521R1_ECDSA_SHA512_RAW']
        },
        'ALG_SIGN_SECP256K1_ECDSA_SHA256_RAW': {
            'batch': {
                'certs': ['MIIEPTCCAiWgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyNDEzNTA0N1oXDTI4MDUyMTEzNTA0N1owgcExIjAgBgNVBAMMGUZJRE8yIEJBVENIIEtFWSBzZWNwMjU2azExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEmiv0G7v5dHwlF9Tv7o1r2QMaqGkLi0hADVEhFnnXsp2+HedjqrRBa3qQZzwSpiltRv+CTVZoJWP/Hf2+PTWWeaMsMCowCQYDVR0TBAIwADAdBgNVHQ4EFgQUV6BBlgA47tSWn5AHhte88JYuHF8wDQYJKoZIhvcNAQELBQADggIBAHpjWBICJEjwxwlW/AKDcb5yCEDT1XJiZ4rVZJH3e1Bk7EgOswGTp+uhwsSuKY19UoA/r8Q73xO06MFz4HgoPybzlO2sXOkudJzRzR2tEUGoLAK5QqjchofuG5qGOqz/0u5ZdPHMDhXVcMlI2YxK062lJXjyzL6HJs3XBaNdRcTnKDMS7NVIReJ9ebrFWRh418zdkP1HFUACThuYXf8gX+T2LzYhctO4M3AKtM5QSJOHBvG1fQhznMRC0Zf5FxjIKQW8vY+HFOmN2yWw96EMPuLDY1d2P8cyEHHmZ0zc7iwOiYWJzFfDSlc6n3qowvlHd3/YZYUOnuuO/HMfUypzZR9bFUK52KJo7JP8ayuu2g76t6qED8DLIA10qMHIpR+ir9d4ymyIcocaP/RtgvHIInMQ9vVGgE7/UqIKroYFOtJMODsyxUGrT745WBN17JfmRQW6WFxfn3NySLwp2fjRWi6BbnqqsGAufnAKyVXBbNio2j49DaMtS3CpL2El5c346LS2ahqUl+sr2wYNqUZOEJhYBx9T1yU4edHawJHzWHzr/NhjtJZ7kC9LYPzo0kb+p2e3G5mFS701/e9tqr9wcMPI11UMKSkI6kNeEr4DKCm9Sv8xq6RD4nhyRKBqme7TAug39PGqDx5AiRBZ6iMHdO2UuX2x41/jwerP96IgHOSM'],
                'privateKey': '2f927265abaa3e8def0cfbba756150d46e5d1f36ef252392c3de79a2e6f85770',
                'publicKey': '04c570e9355d1cbef9347d35f612ef851b6dc35ab949a151648f709398e2d4dbf8eb9c74b4ddf57305eec5d975b358b6e45600be85ce07badcedb5d953c22b51cb'
            },
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_SECP256K1_ECDSA_SHA256_RAW']
        },
        'ALG_SIGN_ED25519_EDDSA_SHA512_RAW': {
            'batch': {
                'certs': ['MIIEQTCCAimgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBoTEYMBYGA1UEAwwPRklETzIgVEVTVCBST09UMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMQwwCgYDVQQLDANDV0cxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMB4XDTE4MDUyMzE0Mzk0M1oXDTI4MDUyMDE0Mzk0M1owgcIxIzAhBgNVBAMMGkZJRE8yIEJBVENIIEtFWSBwcmltZTI1NnYxMTEwLwYJKoZIhvcNAQkBFiJjb25mb3JtYW5jZS10b29sc0BmaWRvYWxsaWFuY2Uub3JnMRYwFAYDVQQKDA1GSURPIEFsbGlhbmNlMSIwIAYDVQQLDBlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTVkxEjAQBgNVBAcMCVdha2VmaWVsZDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE86Xl6rbB+8rpf232RJlnYse+9yAEAqdsbyMPZVbxeqmZtZf8S/UIqvjp7wzQE/Wrm9J5FL8IBDeMvMsRuJtUajLDAqMAkGA1UdEwQCMAAwHQYDVR0OBBYEFFZN98D4xlW2oR9sTRnzv0Hi/QF5MA0GCSqGSIb3DQEBCwUAA4ICAQCH3aCf+CCJBdEtQc4JpOnUelwGGw7DxnBMokHHBgrzJxDn9BFcFwxGLxrFV7EfYehQNOD+74OS8fZRgZiNf9EDGAYiHh0+CspfBWd20zCIjlCdDBcyhwq3PLJ65JC/og3CT9AK4kvks4DI+01RYxNv9S8Jx1haO1lgU55hBIr1P/p21ZKnpcCEhPjB/cIFrHJqL5iJGfed+LXni9Suq24OHnp44Mrv4h7OD2elu5yWfdfFb+RGG2TYURFIGYGijsii093w0ZMBOfBS+3Xq/DrHeZbZrrNkY455gJCZ5eV83Nrt9J9/UF0VZHl/hwnSAUC/b3tN/l0ZlC9kPcNzJD04l4ndFBD2KdfQ2HGTX7pybWLZ7yH2BM3ui2OpiacaOzd7OE91rHYB2uZyQ7jdg25yF9M8QI9NHM/itCjdBvAYt4QCT8dX6gmZiIGR2F/YXZAsybtJ16pnUmODVbW80lPbzy+PUQYX79opeD9u6MBorzr9g08Elpb1F3DgSd8VSLlsR2QPllKl4AcJDMIOfZHOQGOzatMV7ipEVRa0L5FnjAWpHHvSNcsjD4Cul562mO3MlI2pCyo+US+nIzG5XZmOeu4Db/Kw/dEPOo2ztHwlU0qKJ7REBsbt63jdQtlwLuiLHwkpiwnrAOZfwbLLu9Yz4tL1eJlQffuwS/Aolsz7HA=='],
                'privateKey': '28857aaed6dd6efc6e64762f53f7c3da3fa34e45b55bb040612d4f611f49f834',
                'publicKey': '044f3a5e5eab6c1fbcae97f6df644996762c7bef7200402a76c6f230f6556f17aa999b597fc4bf508aaf8e9ef0cd013f5ab9bd27914bf0804378cbccb11b89b546'
            },
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_ED25519_EDDSA_SHA512_RAW']
        },
        'ALG_SIGN_RSASSA_PSS_SHA256_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PSS_SHA256_RAW']
        },
        'ALG_SIGN_RSASSA_PSS_SHA384_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PSS_SHA384_RAW']
        },
        'ALG_SIGN_RSASSA_PSS_SHA512_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PSS_SHA512_RAW']
        },
        'ALG_SIGN_RSASSA_PKCSV15_SHA256_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PKCSV15_SHA256_RAW']
        },
        'ALG_SIGN_RSASSA_PKCSV15_SHA384_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PKCSV15_SHA384_RAW']
        },
        'ALG_SIGN_RSASSA_PKCSV15_SHA512_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PKCSV15_SHA512_RAW']
        },
        'ALG_SIGN_RSASSA_PKCSV15_SHA1_RAW': {
            'batch': rsaBatch,
            'coseParams': FIDO_ALG_TO_COSE['ALG_SIGN_RSASSA_PKCSV15_SHA1_RAW']
        }
    }

    class CTAP2Authenticator {
        constructor(metadataStatement, attestationFormat, origin) {
            this.keyDB   = {};
            this.userDB  = {};
            this.counter = generateSecureRandomInt(15, 150);

            this.metadataStatement = metadataStatement;
            this.attestationFormat = attestationFormat;
            this.aaguid            = this.metadataStatement.aaguid.split('-').join('');
            this.origin            = origin;
            this.rpIDHashBuffer    = window.navigator.fido.fido2.crypto.hash('sha256', breakURL(this.origin).host);

            let authenticationAlgorithm = AUTHENTICATION_ALGORITHMS[this.metadataStatement.authenticationAlgorithm];
            this.selectedCrypto = availableCrypto[authenticationAlgorithm];

            if(!this.selectedCrypto)
                throw new Error(`"${authenticationAlgorithm}" is not supported authentication algorithm!`);

            this.authenticationAlgorithm = authenticationAlgorithm;
            this.batch                   = this.selectedCrypto.batch;

            if(attestationFormat === 'android-key')
                this.batch = this.selectedCrypto['android-keystore-batch'];
            else if(attestationFormat === 'android-safetynet')
                this.batch = safetyNetBatch;
            else if(attestationFormat === 'tpm')
                this.batch = tpmBatch;

            this.coseParams  = this.selectedCrypto.coseParams;
            this.hashAlg     = this.coseParams.hashAlg;
            this.signAlg     = this.coseParams.signAlg;
            this.curve       = this.coseParams.curve;
            this.attestation = ATTESTATION_TYPES[this.metadataStatement.attestationTypes[0]];
        }

    /* ----- MakeCredential ----- */
        makeCredential(makeCredentialRequestStruct, modifiers) {
            try {
                let clientDataHash   = makeCredentialRequestStruct.clientDataHash;

                let flagsStruct      = {'up': true};
                let counterBuffer    = getBigEndianEcoding(new Uint32Array([this.counter]));
                let aaguidBuffer     = hex.decode(this.aaguid);

                return this.generateNewKeyPair()
                .then((keyHandleBuffer) => {
                    /* Saving user information */
                    this.userDB[base64url.encode(keyHandleBuffer)] = makeCredentialRequestStruct.user;
                    if(makeCredentialRequestStruct.authenticatorSelection)
                        this.userDB[base64url.encode(keyHandleBuffer)].requireResidentKey = makeCredentialRequestStruct.authenticatorSelection.requireResidentKey

                    let cosePubKeyBuffer    = this.getCOSEPubKeyBuffer(keyHandleBuffer);

                    let extensionsData = undefined;
                    if(makeCredentialRequestStruct.extensions && Object.keys(makeCredentialRequestStruct.extensions).length) {
                        let extensionsStruct = {};
                        if(makeCredentialRequestStruct.extensions['example.extension']) {
                            extensionsStruct['example.extension'] = 'This is an example extension! If you read this message, you probably successfully passing conformance tests. Good job!'
                        }

                        extensionsData = navigator.fido.fido2.cbor.JSONToCBORArrayBuffer(extensionsStruct);
                    }

                    let authData            = this.generateAuthData(this.rpIDHashBuffer, flagsStruct, counterBuffer, aaguidBuffer, keyHandleBuffer, cosePubKeyBuffer, extensionsData)
                   
                    let fmt                 = undefined;
                    let attStmtPromise      = undefined;

                    if(modifiers) {
                        if(modifiers.authenticatorDataContainsCounterSetToZero) {
                            counterBuffer = new Uint32Array([0]);
                            authData      = this.generateAuthData(this.rpIDHashBuffer, flagsStruct, counterBuffer, aaguidBuffer, keyHandleBuffer, cosePubKeyBuffer)
                        }

                        if(modifiers.authDataEmpty)
                            authData = new Uint8Array();

                        if(modifiers.authDataCounterLessThanZero)
                            authData = this.generateAuthData(this.rpIDHashBuffer, flagsStruct, getBigEndianEcoding(new Uint32Array([-42])), aaguidBuffer, keyHandleBuffer, cosePubKeyBuffer);

                        if(modifiers.authDataFlagsATNotSetAttestationDataPresented)
                            authData[32] = authData[32] - 0x04;

                        if(modifiers.authDataFlagsATNotSetAttestationDataNotPresented)
                            authData = this.generateAuthData(this.rpIDHashBuffer, flagsStruct, counterBuffer);

                        if(modifiers.authDataFlagsATSetAttestationDataNotPresented)
                            authData = this.generateAuthData(this.rpIDHashBuffer, flagsStruct, counterBuffer, new Uint8Array(), new Uint8Array(), new Uint8Array());

                        if(modifiers.authDataAttestationDataContainsLeftoverBytes)
                            authData = mergeArrayBuffers(authData, generateRandomBuffer(32));

                        if(modifiers.forceSurrogate) {
                            this.originalAttestation = this.attestation;
                            this.attestation = 'ATTESTATION_BASIC_SURROGATE';
                        }
                    }

                    let signatureBaseBuffer = mergeArrayBuffers(authData, clientDataHash);

                    if((makeCredentialRequestStruct.attestation === 'none' || this.attestationFormat === 'none')
                    && this.attestation !== 'ATTESTATION_BASIC_SURROGATE') {
                        let noneAAGUID = hex.decode('00000000000000000000000000000000');
                        authData = this.generateAuthData(this.rpIDHashBuffer, flagsStruct, counterBuffer, noneAAGUID, keyHandleBuffer, cosePubKeyBuffer, extensionsData)

                        attStmtPromise  = Promise.resolve({});
                        fmt             = 'none';
                    } else { // ATTESTATION
                        fmt = this.attestationFormat;
                        
                        if(this.attestationFormat === 'packed') {
                            if(this.attestation !== 'ATTESTATION_BASIC_SURROGATE') {
                                attStmtPromise = this.generatePackedFullAttestation(signatureBaseBuffer, modifiers);
                            } else {
                                attStmtPromise = this.generatePackedSurrogateAttestation(keyHandleBuffer, signatureBaseBuffer);
                            }
                        } else if(this.attestationFormat === 'tpm') {
                            attStmtPromise = this.generateTPMAttestation(keyHandleBuffer, signatureBaseBuffer, modifiers);
                        } else if(this.attestationFormat === 'android-safetynet') {
                            attStmtPromise = this.generateAndroidSafetyNetAttestation(signatureBaseBuffer, modifiers);
                        } else if(this.attestationFormat === 'android-key') {
                            attStmtPromise =  this.generateAndroidKeyAttestation(keyHandleBuffer, signatureBaseBuffer, clientDataHash, modifiers)
                        } else {
                            throw new Error('"' + this.attestationFormat + '" is an unknown attestation format!')
                        }
                    }

                    if(modifiers) {
                        if(modifiers.forceSurrogate)
                            this.attestation = this.originalAttestation;

                        if(modifiers.fmtMissing)
                            fmt = undefined;

                        if(modifiers.fmtInvalid)
                            fmt = generateRandomTypeExcluding('string')

                        if(modifiers.fmtSetNone)
                            fmt = 'none';

                        if(modifiers.fmtUnknown)
                            fmt = 'BananaPancake';

                        if(modifiers.authDataMissing)
                            authData = undefined;

                        if(modifiers.authDataInvalid)
                            authData = generateRandomTypeExcluding()

                        if(modifiers.x5cSigMadeByRegistrationKeypair)
                            attStmtPromise = this.generatePackedSurrogateAttestation(keyHandleBuffer, signatureBaseBuffer);

                        if(modifiers.attStmtFullAttestation)
                            attStmtPromise = this.generatePackedFullAttestation(signatureBaseBuffer);
                    }

                    return attStmtPromise.then((attStmt) => {
                        if(modifiers) {
                            if(modifiers.attStmtMissing)
                                attStmt = undefined;

                            if(modifiers.attStmtInvalid)
                                attStmt = generateRandomTypeExcluding('object');

                            if(modifiers.attStmtEmptyMap)
                                attStmt = {};

                            if(modifiers.attStmtAlgMissing)
                                attStmt.alg = undefined;

                            if(modifiers.attStmtAlgInvalid)
                                attStmt.alg = generateRandomTypeExcluding('number');

                            if(modifiers.attStmtAlgNotMatchingMetadata)
                                attStmt.alg = -42;

                            if(modifiers.attStmtSigMissing)
                                attStmt.sig = undefined;

                            if(modifiers.attStmtSigInvalid)
                                attStmt.sig = generateRandomTypeExcluding();

                            if(modifiers.attStmtSigEmpty)
                                attStmt.sig = new Uint8Array();

                            if(modifiers.sigUnverifiable)
                                attStmt.sig = mergeArrayBuffers(attStmt.sig.slice(8), generateRandomBuffer(8));

                            if(modifiers.x5cSigMadeByRegistrationKeypair)
                                attStmt.x5c = this.getX5C();
                        }

                        let makeCredentialRespStruct = {authData, fmt, attStmt}
                        let attestationObject        = window.navigator.fido.fido2.cbor.JSONToCBORArrayBuffer(makeCredentialRespStruct);
                        let credId                   = keyHandleBuffer;

                        this.counter += 1;

                        return { credId, attestationObject }
                    })
                })
            } catch(e) {
                return Promise.reject('Error while creating credential: ' + e)
            }
        }

        generatePackedFullAttestation(signatureBaseBuffer, modifiers) {
            let sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
            let x5c = this.getX5C();
            let alg = this.coseParams.alg;

            if(modifiers) {
                if(modifiers.intermediate) {
                    this.batch = this.selectedCrypto.batchForIntermediate;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C();
                }

                if(modifiers.x5cMissing)
                    x5c = undefined;

                if(modifiers.x5cInvalid)
                    x5c = generateRandomTypeExcluding('array');

                if(modifiers.x5cEmpty)
                    x5c = [];

                if(modifiers.x5cLeafExpired) {
                    this.batch = this.selectedCrypto.batchEXPIRED;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C();
                }

                if(modifiers.x5cLeafNotStarted) {
                    this.batch = this.selectedCrypto.batchNOTStarted;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C();
                }

                if(modifiers.x5cLeafAlgorithmNotInMetadata) {
                    this.batch = availableCrypto['ALG_SIGN_SECP256K1_ECDSA_SHA256_RAW'].batch;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C();
                }

                if(modifiers.x5cFullChain) {
                    this.batch = this.selectedCrypto.batchForIntermediate;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C().concat(rootCert);
                }

                if(modifiers.x5cIntermediateExpired) {
                    this.batch = this.selectedCrypto.batchForExpiredIntermediate;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C();
                }

                if(modifiers.x5cUnverifiableChain) {
                    this.batch = this.selectedCrypto.batchForIntermediate;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    x5c = this.getX5C();
                    x5c[1] = base64.decode(this.selectedCrypto.batchForExpiredIntermediate.certs[1]);
                }

                if(modifiers.x5cUnorderedChain) {
                    this.batch = this.selectedCrypto.batchForIntermediate;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    let certs = this.getX5C();
                    x5c = [certs[1], certs[0]];
                }

                if(modifiers.x5cSigNotVerifiableByPKFromCert) {
                    this.batch = this.selectedCrypto.batchEXPIRED;
                    sigPromise = this.signWithBatchPrivateKey(signatureBaseBuffer);
                    this.batch = this.selectedCrypto.batch;
                    x5c = this.getX5C();
                }

                /* ----- RESET BACK TO NORMAL STATE ----- */
                this.batch = this.selectedCrypto.batch;
            }

            return sigPromise
                .then((sig) => {
                    return { sig, x5c, alg }
                })
        }

        generatePackedSurrogateAttestation(keyHandleBuffer, signatureBaseBuffer) {
            let alg = this.coseParams.alg;

            return this.signWithKeyHandlePrivateKey(keyHandleBuffer, signatureBaseBuffer)
                .then((sig) => {
                    return { sig, alg }
                })
        }

        generatePubArea(publicKey, nameAlg) {
            let nameAlgID =  undefined;
            if(nameAlg === 'SHA-256')
                nameAlgID = '000B'
            else
                nameAlgID = '0004'

            let base = `0001${nameAlgID}0006047200209dffcbf36c383ae699fb9868dc6dcb89d7153884be2803922c124158bfad22ae001000100800000000000100`;

            return mergeArrayBuffers(hex.decode(base), publicKey);
        }

        generateCertInfo(signatureBaseBuffer, nameAlg, pubAreaBuffer) {
            let tbcDigest = window.navigator.fido.fido2.crypto.hash(this.coseParams.hashAlg, signatureBaseBuffer);
            let tbcDigestLength    = new Uint16Array([tbcDigest.length]);
            let tbcDigestHex       = hex.encode(tbcDigest)
            let tbcDigestLengthHex = hex.encode(getBigEndianEcoding(tbcDigestLength.buffer))

            let nameAlgID =  undefined;
            if(nameAlg === 'SHA-256')
                nameAlgID = '000B'
            else
                nameAlgID = '0004'

            let pubAreaDigest = window.navigator.fido.fido2.crypto.hash(nameAlg, pubAreaBuffer);
            let nameLength    = new Uint16Array([pubAreaDigest.length + 2]);
            let nameHex       = nameAlgID + hex.encode(pubAreaDigest)
            let nameLengthHex = hex.encode(getBigEndianEcoding(nameLength.buffer))

            let qualifiedSignerDigest       = window.navigator.fido.fido2.crypto.hash(nameAlg, generateRandomBuffer(32));
            let qualifiedSignerDigestLength = new Uint16Array([qualifiedSignerDigest.length + 2]);
            let qualifiedSignerHex          = nameAlgID + hex.encode(qualifiedSignerDigest)
            let qualifiedSignerLengthHex    = hex.encode(getBigEndianEcoding(qualifiedSignerDigestLength.buffer))

            return hex.decode(`ff54434780170022000b11e68ed44db5372e14296e2f84acc78398751881921e30fc22a06f8b73c79453${tbcDigestLengthHex}${tbcDigestHex}000000014770174855697b4bc68560a501737ef98d345655fb${nameLengthHex}${nameHex}${qualifiedSignerLengthHex}${qualifiedSignerHex}`)
        }

        generateTPMAttestation(keyHandleBuffer, signatureBaseBuffer, modifiers) {
            let ver = '2.0';
            let alg = this.coseParams.alg;
            let pubArea  = undefined;
            let certInfo = undefined;
            let nameAlg  = 'SHA-256';

            let userPubKey = this.getRawPubKey(keyHandleBuffer);
            return window.navigator.fido.fido2.crypto.generateRSA2048KeypairAsync('RSASSA-PKCS1-v1_5', this.coseParams.hashAlg)
                .then((AIKKeyPair) => {
                    pubArea  = this.generatePubArea(base64url.decode(userPubKey.n), nameAlg);
                    certInfo = this.generateCertInfo(signatureBaseBuffer, nameAlg, pubArea);
                    
                    if(modifiers) {
                        if(modifiers.tpmCertInfoInvalidAttToBeSignedHash)
                            certInfo = this.generateCertInfo(generateRandomBuffer(32), nameAlg, pubArea);

                        if(modifiers.tpmCertInfoInvalidMagic)
                            certInfo.set(generateRandomBuffer(4));

                        if(modifiers.tpmPubAreaInvalidUnique) {
                            pubArea  = this.generatePubArea(generateRandomBuffer(256), nameAlg);
                            certInfo = this.generateCertInfo(signatureBaseBuffer, nameAlg, pubArea);
                        }

                        if(modifiers.tpmPubAreaNameAlgNotMatchingCertInfo) {
                            pubArea  = this.generatePubArea(base64url.decode(userPubKey.n), 'SHA-1');
                            certInfo = this.generateCertInfo(signatureBaseBuffer, nameAlg, pubArea);
                        }
                    }

                    let aikPromise = generateTPMAIK(this.hashAlg, this.batch.privateKey, AIKKeyPair.public, this.batch.commonName)
                    let sigPromise = window.navigator.fido.fido2.crypto.signWithRSAKeyAsync(this.coseParams.signAlg, this.coseParams.hashAlg, AIKKeyPair.private, certInfo)

                    return Promise.all([aikPromise, sigPromise])
                }).then((results) => {
                    let x5c = [results[0]].concat(this.getX5C());
                    let sig = results[1];

                    if(modifiers) {
                        if(modifiers.tpmAttsCertificateOrder)
                            x5c = x5c.reverse();
                    }

                    return { ver, alg, sig, x5c, certInfo, pubArea }
                })
        }

        generateAndroidSafetyNetAttestation(signatureBaseBuffer, modifiers) {
            /* -----  JWT ----- */
            let header = {
                'alg': 'RS256',
                'x5c': []
            }

            let nonceBuffer = window.navigator.fido.fido2.crypto.hash('SHA-256', signatureBaseBuffer);
            let timestampMs = Date.now();
            let payload = {
                'nonce': base64.encode(nonceBuffer),
                'timestampMs': timestampMs,
                'apkPackageName': 'com.android.keystore.androidkeystoredemo',
                'apkDigestSha256': 'dM/LUHSI9SkQhZHHpQWRnzJ3MvvB2ANSauqYAAbS2Jg=',
                'apkCertificateDigestSha256': ['bsb4/WQdaaOWYCd/j9OJiQpg7b0iwFgAc/zzA1tCfwE='],
                'ctsProfileMatch': true,
                'basicIntegrity': true
            }

            if(modifiers) {
                if(modifiers.safetyNetInvalidAttToBeSigned)
                    payload.nonce = base64.encode(generateRandomBuffer(32));

                if(modifiers.safetyNetFalseCtsProfileMatch)
                    payload.ctsProfileMatch = false;

                if(modifiers.safetyNetTimestampMsIsInFuture)
                    payload.timestampMs = Date.now() + 3600000;

                if(modifiers.safetyNetTimestampMsIsOutdated)
                    payload.timestampMs = Date.now() - 75000;
            }


            return window.navigator.fido.fido2.crypto.generateRSA2048KeypairAsync('RSASSA-PKCS1-v1_5', 'SHA-256')
            .then((newKey) => {
                return window.generateSafetyNetAttest('SHA-256', this.batch.privateKey, newKey.public)
                .then((result) => {
                    header.x5c = [base64.encode(result)].concat(this.getX5C().map(base64.encode));
                    
                    let payloadString = `${JSONToBase64URL(header)}.${JSONToBase64URL(payload)}`;

                    let payloadBuffer = stringToArrayBuffer(payloadString);

                    return window.navigator.fido.fido2.crypto.signWithRSAKeyAsync(this.coseParams.signAlg, 'SHA-256', newKey.private, payloadBuffer);
                })
                .then((signature) => {
                    let sig = base64url.encode(signature);
                    let responseStr = `${JSONToBase64URL(header)}.${JSONToBase64URL(payload)}.${sig}`;
                    let response = stringToArrayBuffer(responseStr);
                    let ver = '12685023';

                    if(modifiers) {
                        if(modifiers.safetyNetEmptyVer)
                            ver = '';

                        if(modifiers.safetyNetEmptyResponse)
                            response = '';

                        if(modifiers.safetyNetEmptyX5C) {
                            header.x5c  = [];
                            responseStr = `${JSONToBase64URL(header)}.${JSONToBase64URL(payload)}.${sig}`;
                            response    = stringToArrayBuffer(responseStr);
                        }
                    }

                    return {ver, response}
                })

            })
        }

        generateAndroidKeyAttestation(keyHandleBuffer, signatureBaseBuffer, clientDataHash, modifiers) {   
            let alg = this.coseParams.alg;
            let userPubKey = this.getANSIECDSAPubKey(keyHandleBuffer);


            if(modifiers) {
                if(modifiers.androidKeyAttsInvalidClientDataHash)
                    clientDataHash = generateRandomBuffer(32);

                if(modifiers.androidKeyAttsInvalidPublicKey)
                    userPubKey = mergeArrayBuffers(new Uint8Array([0x04]), generateRandomBuffer(64));
            }

            let androidKeyAttestationBuffer = window.generateAndroidKeystoreAttestationCertificate(hex.decode(this.batch.privateKey), userPubKey, clientDataHash);
            let x5c = [androidKeyAttestationBuffer].concat(this.getX5C());

            if(modifiers) {
                if(modifiers.androidKeyAttsCertificateOrder)
                    x5c = [androidKeyAttestationBuffer].concat(this.getX5C()).reverse()
            }

            return this.signWithKeyHandlePrivateKey(keyHandleBuffer, signatureBaseBuffer)
                .then((sig) => {
                    return { sig, alg, x5c }
                })
        }
    /* ----- MakeCredential END----- */

    /* ----- GetAssertion ----- */
        getAssertion(getAssertionRequestStruct, modifiers) {
            try {
                let clientDataHash      = getAssertionRequestStruct.clientDataHash;
                let counterBuffer       = getBigEndianEcoding(new Uint32Array([this.counter]));
                let flagsObject         = {'up': true}

                if(!getAssertionRequestStruct.credId) {
                    let credIDs = Object.keys(this.userDB);

                    let selectedCredIDs = [];
                    for(let credId of credIDs)
                        if(this.userDB[credId].requireResidentKey)
                            selectedCredIDs.push(credId);

                    if(!selectedCredIDs.length)
                        throw new Error('No registered user was found!');

                    getAssertionRequestStruct.credId = base64url.decode(selectedCredIDs[0]);
                }

                if(!this.userDB[base64url.encode(getAssertionRequestStruct.credId)])
                    throw new Error(`Credential with ID "${base64url.encode(getAssertionRequestStruct.credId)}" does not exist!`);

                let userHandle = base64url.decode(this.userDB[base64url.encode(getAssertionRequestStruct.credId)].id);

                if(getAssertionRequestStruct.userVerification !== 'discouraged') {
                    flagsObject = {
                        'up': true
                    }
                } else {
                    flagsObject = {
                        'up': false
                    }
                }

                let badRpIDHash = undefined;
                if(modifiers) {
                    if(modifiers.authenticatorDataFlagsUPisTRUE)
                        flagsObject.up = true;

                    if(modifiers.authenticatorDataFlagsUPisFALSE)
                        flagsObject.up = false;

                    if(modifiers.authenticatorDataFlagsUVisTRUE)
                        flagsObject.uv = true;

                    if(modifiers.authenticatorDataFlagsUVisFALSE)
                        flagsObject.uv = false;

                    if(modifiers.authenticatorDataContainsInvalidRPIdHash)
                        badRpIDHash = generateRandomBuffer(32);

                    if(modifiers.authenticatorDataContainsCounterSetToZero)
                        counterBuffer = new Uint32Array([0]);

                    if(modifiers.authenticatorDataCounterIsNotIncreased)
                        counterBuffer = getBigEndianEcoding(new Uint32Array([this.counter - 1]));
                }


                let extensionsData = undefined;
                if(getAssertionRequestStruct.extensions && Object.keys(getAssertionRequestStruct.extensions).length) {
                    let extensionsStruct = {};
                    if(getAssertionRequestStruct.extensions['example.extension']) {
                        extensionsStruct['example.extension'] = 'This is an example extension! If you read this message, you probably successfully passing conformance tests. Good job!';
                    }

                    if(getAssertionRequestStruct.extensions['txAuthGeneric']) {
                        extensionsStruct['txAuthGeneric'] = navigator.fido.fido2.crypto.hash(this.hashAlg, getAssertionRequestStruct.extensions['txAuthGeneric'].content);
                    }

                    if(getAssertionRequestStruct.extensions['txAuthSimple']) {
                        extensionsStruct['txAuthSimple'] = getAssertionRequestStruct.extensions['txAuthSimple'];
                    }

                    extensionsData = navigator.fido.fido2.cbor.JSONToCBORArrayBuffer(extensionsStruct);
                }

                let authenticatorData   = this.generateAuthData(badRpIDHash || this.rpIDHashBuffer, flagsObject, counterBuffer, undefined, undefined, undefined, extensionsData);

                if(modifiers) {
                    if(modifiers.authenticatorDataContainsInvalidClientDataHash)
                        clientDataHash = generateRandomBuffer(32);

                    if(modifiers.authenticatorDataContainsLeftoverBytes)
                        authenticatorData = mergeArrayBuffers(authenticatorData, generateRandomBuffer(2));
                }

                let signatureBaseBuffer = mergeArrayBuffers(authenticatorData, clientDataHash);
                let credId              = getAssertionRequestStruct.credId;

                this.counter += 1;

                return this.signWithKeyHandlePrivateKey(credId, signatureBaseBuffer)
                    .then((signature) => {
                        return { authenticatorData, signature, credId, userHandle }
                    })
            } catch(e) {
                return Promise.reject('Error while getting assertion: ' + e)
            }
        }
    /* ----- GetAssertion ENDS ----- */

    /* ---------- KEYHANDLE ----------- */
        /**
         * Generates AuthData buffer
         * @param  {Uint8Array} rpIDHashBuffer
         * @param  {Object}    flagsStruct
         * @param  {Uint8Array} counterBuffer
         * @param  {Uint8Array} aaguidBuffer
         * @param  {Uint8Array} credId
         * @param  {Uint8Array} cosePublicKey
         * @return {Uint8Array}
         */
        generateAuthData(rpIDHashBuffer, flagsStruct, counterBuffer, aaguidBuffer, credId, cosePublicKey, extensionsData) {
            if(!rpIDHashBuffer || !flagsStruct || !counterBuffer)
                throw new Error('Missing rpIDHashBuffer or/and flagsStruct or/and counterBuffer argument!');

            let flags = 0;

            let upFlag = 0x01; // Test of User Presence
            let uvFlag = 0x04; // User Verification
            let atFlag = 0x40; // Attested credential data included (AT).
            let edFlag = 0x80; // Extension data

            if(flagsStruct.up)
                flags += upFlag;

            if(flagsStruct.uv)
                flags += uvFlag;

            let credIdLength = new Uint16Array();
            if(aaguidBuffer || credId || cosePublicKey) {
                if(!aaguidBuffer || !credId || !cosePublicKey)
                    throw new Error('Missing aaguidBuffer or/and credId or/and cosePublicKey argument!');

                flags += atFlag;
                credIdLength = new Uint16Array([credId.byteLength])
            }

            if(extensionsData) {
                flags += edFlag;
            } else {
                extensionsData = new Uint8Array();
            }

            aaguidBuffer  = aaguidBuffer  || new Uint8Array();
            credId        = credId        || new Uint8Array();
            cosePublicKey = cosePublicKey || new Uint8Array();

            let flagsBuffer = new Uint8Array([flags]);

            credIdLength  = getBigEndianEcoding(credIdLength);

            return mergeArrayBuffers(rpIDHashBuffer, flagsBuffer, counterBuffer, aaguidBuffer, credIdLength, credId, cosePublicKey, extensionsData)
        }

        signWithKeyHandlePrivateKey(keyHandleBuffer, messageBuffer) {
            if(!this.keyHandleExists(keyHandleBuffer))
                throw new Error('Unknown keyHandle!');

            let keyHandleString = base64url.encode(keyHandleBuffer);
            let privateKey = this.keyDB[keyHandleString].private;

            if(this.coseParams.kty === COSE_KTY.EC2) {
                let messageHash = window.navigator.fido.fido2.crypto.hash(this.hashAlg, messageBuffer);
                return Promise.resolve(window.navigator.fido.fido2.crypto.signWithECDSAKeyDER(this.curve, privateKey, messageHash))
            } else if(this.coseParams.kty === COSE_KTY.OKP) { //EDDSA
                return Promise.resolve(window.navigator.fido.fido2.crypto.signWithED25519Key(privateKey, messageBuffer))
            } else {
                return window.navigator.fido.fido2.crypto.signWithRSAKeyAsync(this.signAlg, this.hashAlg, privateKey, messageBuffer)
            }
        }

        getRawPubKey(keyHandleBuffer) {
            if(!this.keyHandleExists(keyHandleBuffer))
                throw new Error('Unknown keyHandle!');
            let keyHandleString = base64url.encode(keyHandleBuffer);
    
            return this.keyDB[keyHandleString].public
        }

        getANSIECDSAPubKey(keyHandleBuffer) {
            let pubKey = this.getRawPubKey(keyHandleBuffer);

            if(this.coseParams.kty === COSE_KTY.EC2)
                return hex.decode(pubKey);
            else
                throw new Error('The key of not of EC2 type!');
        }

        getCOSEPubKeyBuffer(keyHandleBuffer) {
            let pubKey = this.getRawPubKey(keyHandleBuffer);
            let COSESTRUCT      = undefined;
            if(this.coseParams.kty === COSE_KTY.EC2) {
                let ansiPubKey = hex.decode(pubKey);
                /* 
                   +------+-------+-------+---------+----------------------------------+
                   | name | key   | label | type    | description                      |
                   |      | type  |       |         |                                  |
                   +------+-------+-------+---------+----------------------------------+
                   | crv  | 2     | -1    | int /   | EC Curve identifier - Taken from |
                   |      |       |       | tstr    | the COSE Curves registry         |
                   |      |       |       |         |                                  |
                   | x    | 2     | -2    | bstr    | X Coordinate                     |
                   |      |       |       |         |                                  |
                   | y    | 2     | -3    | bstr /  | Y Coordinate                     |
                   |      |       |       | bool    |                                  |
                   +------+-------+-------+---------+----------------------------------+
                */
                
                ansiPubKey = ansiPubKey.slice(1);
                let xCoefficient = ansiPubKey.slice(0, ansiPubKey.length / 2);
                let yCoefficient = ansiPubKey.slice(ansiPubKey.length / 2);

                COSESTRUCT = {
                     '1': this.coseParams.kty,
                     '3': this.coseParams.alg,
                    '-1': this.coseParams.crv,
                    '-2': xCoefficient,
                    '-3': yCoefficient
                }
            } else if(this.coseParams.kty === COSE_KTY.OKP) {
                let xCoefficient = pubKey;
                COSESTRUCT = {
                     '1': this.coseParams.kty,
                     '3': this.coseParams.alg,
                    '-1': this.coseParams.crv,
                    '-2': hex.decode(xCoefficient)
                }
            } else {
                let rsaPKCoefficients = pubKey;
                COSESTRUCT = {
                     '1': this.coseParams.kty,
                     '3': this.coseParams.alg,
                    '-1': base64url.decode(rsaPKCoefficients.n),
                    '-2': base64url.decode(rsaPKCoefficients.e)
                }
            }

            return window.navigator.fido.fido2.cbor.JSONToCBORArrayBuffer(COSESTRUCT)
        }

        /**
         * Returns generates keyPair, and returns corresponding keyHandle
         * @return {Buffer} - KeyHandle buffer
         */
        generateNewKeyPair() {
            let keyHandleBuffer = generateRandomBuffer(32);
            let keyHandleString = base64url.encode(keyHandleBuffer);

            let newKeypairPromise = undefined;
            if(this.coseParams.kty === COSE_KTY.EC2)
                newKeypairPromise = Promise.resolve(window.navigator.fido.fido2.crypto.generateECDSAKeypair(this.curve));
            else if(this.coseParams.kty === COSE_KTY.OKP)
                newKeypairPromise = Promise.resolve(window.navigator.fido.fido2.crypto.generateED25519Keypair());
            else
                newKeypairPromise = window.navigator.fido.fido2.crypto.generateRSA2048KeypairAsync(this.signAlg, this.hashAlg); 

            return newKeypairPromise
                .then((newKeypair) => {
                    this.keyDB[keyHandleString] = newKeypair;
                    return keyHandleBuffer
                })
        }

        keyHandleExists(keyHandleBuffer) {
            let keyHandleString = base64url.encode(keyHandleBuffer);

            return !!this.keyDB[keyHandleString]
        }

    /* ---------- BATCH ATTESTATION ---------- */
        getX5C() {
            return this.batch.certs.map((value) => base64.decode(value))
        }

        signWithBatchPrivateKey(messageBuffer) {
            if(this.coseParams.kty !== COSE_KTY.RSA) {
                let messageHash = window.navigator.fido.fido2.crypto.hash(this.hashAlg, messageBuffer);
                return Promise.resolve(window.navigator.fido.fido2.crypto.signWithECDSAKeyDER(this.curve, this.batch.privateKey, messageHash))
            } else {
                return window.navigator.fido.fido2.crypto.signWithRSAKeyAsync(this.signAlg, this.hashAlg, this.batch.privateKey, messageBuffer)
            }
        }
    }

    window.CTAP.CTAP2Authenticator = CTAP2Authenticator;
})()
